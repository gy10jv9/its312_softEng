// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL") // ara sa .env nga file
}

model Test {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  inputStringHere String
}

model User {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  password   String
  email      String  @unique
  isVerified Boolean @default(false)

  roleId       String? @db.ObjectId
  departmentId String? @db.ObjectId
  programId    String? @db.ObjectId

  uploadIds Book[]

  role Role? @relation(fields: [roleId], references: [id])
}

model Role {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  users User[]
}

model Book {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  abstract         String?
  keywords         String?
  language         String?
  yearOfSubmission Int?
  department       String?
  program          String?
  coverImage       String?
  pdfUrl           String?
  pdfDownloadLink  String?
  recommendations  Int     @default(0)

  schoolId     String?  @db.ObjectId
  uploadedById String?  @db.ObjectId
  authorIds    String[] @db.ObjectId
  advisorIds   String[] @db.ObjectId

  school     School?   @relation(fields: [schoolId], references: [id])
  uploadedBy User?     @relation(fields: [uploadedById], references: [id])
  authors    Author[]  @relation(fields: [authorIds], references: [id])
  advisors   Advisor[] @relation(fields: [advisorIds], references: [id])
}

model Author {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  bookIds   String[] @db.ObjectId // many authors to many researches
  books     Book[]   @relation(fields: [bookIds], references: [id])
}

model Advisor {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  bookIds   String[] @db.ObjectId // many advisors to many researches
  books     Book[]   @relation(fields: [bookIds], references: [id])
}

model School {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  bookIds Book[] // one school to many researches
}
